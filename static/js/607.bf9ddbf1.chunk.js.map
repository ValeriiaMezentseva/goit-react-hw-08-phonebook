{"version":3,"file":"static/js/607.bf9ddbf1.chunk.js","mappings":"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","sources":["components/Form/Form.styled.jsx","redux/phonebook/selectors.js","components/Form/Form.jsx","components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { Field, ErrorMessage } from 'formik';\n\n\nexport const FormWrapper = styled.div`\ntext-align: center; \n`\nexport const FormBox = styled.div`\n display: flex;\n flex-direction: column;\n align-items: flex-start;\n margin: 0 auto 20px;\n text-align: start;\n width: 300px;\n`\n\nexport const Label = styled.label`\n display: flex;\n flex-direction: column;\n width: 100%;\n font-weight: 500;\n :not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\nexport const Input = styled(Field)`\nfont-size: 20px;\npadding: 5px 10px;\nborder: 2px solid #ccc;\nborder-radius: 5px;\noutline: none;\n:focus {\n    border-color: #4287f5;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  margin-top: 5px;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const FormButton = styled.button`\nfont-size: 16px;\npadding: 10px;\nborder: 2px solid #ccc;\nborder-radius: 5px;\nheight: 50px;\n :not(:last-child) {\n    margin-right: 10px;\n  }\n  :hover {\n    color: #4287f5;\n    border-color: #4287f5;  \n  }\n`;","export const selectContacts = state => state.contacts.items; \nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.value; \nexport const selectOpenFilter = state => state.filter.isOpen; \nexport const selectOperation = state => state.contacts.operation; ","import { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport { Loader } from 'components/Loader/Loader';\nimport { FormWrapper, FormBox, Label, Input, Error, FormButton } from './Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectOpenFilter , selectOperation} from 'redux/phonebook/selectors';\nimport { toggleFilterAction } from \"redux/phonebook/sliceFilter\";\nimport { addContact } from 'redux/phonebook/operations';\n\nconst namePattern = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\nconst numberPattern = /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nconst schema = yup.object().shape({\n    name: yup.string().matches(namePattern, \"Name is not valid\").required(),\n    number: yup.string().min(6).max(24).matches(numberPattern, 'Phone number is not valid').required(),\n});\n\nconst initialValues = {\n    id: '',\n    name: '',\n    number: '',\n}; \n\nconst ContactsForm = () => {\n\n    const contacts = useSelector(selectContacts); \n    const operation = useSelector(selectOperation);\n    const isOpenFilter = useSelector(selectOpenFilter);\n    const dispatch = useDispatch();  \n    const toggle = () => {\n    dispatch(toggleFilterAction());\n  }\n    const handleSubmit = (values, { resetForm }) => {  \n        const isIncluded = contacts.some(contact => contact.name.toLowerCase() === values.name.toLowerCase());\n        if (isIncluded) {\n            Notify.failure(`${values.name} is already in your contacts`)\n            return;\n        }\n        values.id = nanoid(10);\n        try {\n            dispatch(addContact(values));\n            Notify.success(`${values.name} was successfully added to  your contacts`);\n            resetForm();\n        } catch (error) {\n            Notify.failure(`Something went wrong`);\n        };\n\n     }\n     return (\n         <Formik\n             initialValues={initialValues}\n             validationSchema={schema}\n             onSubmit={handleSubmit}\n         >\n             <FormWrapper>\n                 <Form autoComplete=\"off\">\n                     <FormBox>\n                <Label htmlFor='name'>\n                     Name\n                     <Input\n                         id='name'\n                         type=\"text\"\n                         name=\"name\"\n                         title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                     />\n                     <Error name='name' component='div' />\n                 </Label>\n                <Label htmlFor='number'>\n                    Number\n                     <Input\n                         id='number'\n                         type=\"tel\"\n                         name=\"number\"\n                         title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                     />\n                     <Error name='number' component='div' /> \n                         </Label>\n                         </FormBox>\n                     <FormButton type=\"submit\"> {operation === 'add' ? <Loader/> : 'Add contact' } </FormButton> \n                     <FormButton type=\"button\" onClick={toggle} isOpen={isOpenFilter}>{isOpenFilter ? 'Close filter' : 'Search'}</FormButton>\n                 </Form>\n                 </FormWrapper>\n             </Formik>\n     )\n\n       \n };\n    \nexport default ContactsForm;","import styled from \"@emotion/styled\";\nimport { FaUserCircle } from 'react-icons/fa';\n\n\n\nexport const UserIcon = styled(FaUserCircle)`\npadding: 3px;\nborder: 1px solid black;\nborder-radius: 50%;\nmargin-right: 10px;\ncolor: black;\nfont-size: 20px;\n`\n\nexport const ItemUser = styled.li`\ndisplay: flex;\njustify-content: space-between;\nalign-items: center;\nborder-bottom: 1px solid #ccc;\n:not(:last-child) {\n    margin-bottom: 20px;\n    }\n    :hover {\n    color: #4287f5;\n    border-color: #4287f5;\n  }\n`\n\nexport const ContactList = styled.ul`\nbackground-color: #c5dcf0;\npadding: 15px;\n`\n\nexport const ContactsButton = styled.button`\nwidth: 36px;\n  height: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #242323;\n  font-size: 36px;\n  border: none;\n  background-color: transparent;\n  transition: all 100ms linear;\n  cursor: pointer;\n  :hover {\n    color: red;\n  }\n`;\n\nexport const ContactsTitle = styled.h2`\n    text-align: center; \n\n`;\n\n\nexport const ContactsContainer = styled.div`\n`;","import { TiDeleteOutline } from 'react-icons/ti';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/phonebook/operations';\nimport { useSelector } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { LoaderSpinner } from 'components/Loader/Loader';\nimport { selectContacts, selectFilter, selectOperation } from 'redux/phonebook/selectors';\nimport { ItemUser, UserIcon, ContactList, ContactsButton, ContactsTitle, ContactsContainer } from './Contacts.styled';\n\n\nconst ContactsList = () => {\n    const dispatch = useDispatch();\n    \n    const contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter);\n    const operation = useSelector(selectOperation); \n    \n    const removeContact = id => {\n        try {\n            dispatch(deleteContact(id));\n            Notify.success(`Contact was successfully removed from your contacts`);\n        } catch (error) {\n            Notify.error(`Something went wrong`);\n    }\n    };\n    \n const getFilteredContacts = () => {\n    const normilizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normilizedFilter)\n    );\n  };\n    const filtredContacts = getFilteredContacts();\n    \n\n    return (\n        <ContactsContainer>\n            <ContactsTitle> Contacts </ContactsTitle>\n            {filtredContacts.length > 0 ? (\n                <ContactList>\n                    {filtredContacts.map(({ id, name, phone }) => (\n                        <ItemUser key={id}>\n                            <UserIcon /> {name}: {phone}\n                            <ContactsButton onClick={() => removeContact(id)}>\n                                { operation === id ? <LoaderSpinner /> : <TiDeleteOutline />}</ContactsButton>\n                        </ItemUser>\n                    ))}\n                </ContactList>\n            ) : (<p>There is no contacts</p>)}\n        </ContactsContainer>\n    );\n};\n\nexport default ContactsList; ","import styled from \"@emotion/styled\";\n\nexport const FilterWrapper = styled.div`\n  padding: 20px 40px;\n  text-align: center;\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 20px;\n  text-align: center;\n`;\n\nexport const Input = styled.input`\n  font-size: 20px;\n  padding: 5px 10px;\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  outline: none;\n  :focus {\n    border-color: #4287f5;\n  }\n`;","import { selectFilter } from 'redux/phonebook/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FilterWrapper, Title, Input } from './Filter.styled';\nimport { setFilter } from 'redux/phonebook/sliceFilter';\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilter);\n    const onChangeFilter = e => {\n    dispatch(setFilter(e.currentTarget.value))\n  }; \n    return (\n        <FilterWrapper>\n            <Title>Filter</Title>\n            <Input onChange={onChangeFilter} name=\"filter\" type=\"text\" value={filter}></Input>\n        </FilterWrapper>\n    )\n};\n\nexport default Filter; ","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\nwidth: 600px;\nmargin: 0 auto;\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\nbackground-color: #c5dcf0;\npadding: 10px;\nborder: 1px solid black; \nborder-radius: 5px;\n`;\n\nexport const Title = styled.h1`\ntext-align: center;\n`;","import ContactsForm from \"components/Form/Form\";\nimport ContactsList from \"components/Contacts/Contacts\";\nimport Filter from \"components/Filter\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { Container, Title } from \"./Contacts.styled\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectOpenFilter, selectError, selectOperation} from 'redux/phonebook/selectors';\nimport { useEffect } from \"react\";\nimport { fetchContacts } from \"redux/phonebook/operations\";\nimport { Helmet } from \"react-helmet\";\n\n\nconst ContactsPage = () => {\n    const isOpenFilter = useSelector(selectOpenFilter);\n    const error = useSelector(selectError);\n    const operation = useSelector(selectOperation); \n    const dispatch = useDispatch(); \n\n     useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n    return (\n        <Container>\n           <Helmet>\n        <Title> My Contacts </Title>\n      </Helmet>\n      <ContactsForm />\n      {isOpenFilter && (<Filter />)}\n      {operation === 'fetch' && !error ? <Loader /> : <ContactsList />}\n            {error && <div> Something went wrong! Please try again! </div>}\n        </Container>\n\n    )\n};\n\nexport default ContactsPage; "],"names":["FormWrapper","styled","FormBox","Label","Input","Field","Error","ErrorMessage","FormButton","selectContacts","state","contacts","items","selectError","error","selectFilter","filter","value","selectOpenFilter","isOpen","selectOperation","operation","schema","yup","shape","name","matches","required","number","min","max","initialValues","id","useSelector","isOpenFilter","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","some","contact","toLowerCase","Notify","nanoid","addContact","autoComplete","htmlFor","type","title","component","Loader","onClick","toggleFilterAction","UserIcon","FaUserCircle","ItemUser","ContactList","ContactsButton","ContactsTitle","ContactsContainer","filtredContacts","normilizedFilter","includes","getFilteredContacts","length","map","phone","deleteContact","removeContact","FilterWrapper","Title","onChange","e","setFilter","currentTarget","Container","useEffect","fetchContacts","Helmet","Contacts"],"sourceRoot":""}